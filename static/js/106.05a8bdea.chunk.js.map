{"version":3,"file":"static/js/106.05a8bdea.chunk.js","mappings":"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","sources":["components/Cast.jsx","components/MovieDetails.jsx","components/Reviews.jsx","services/api.jsx"],"sourcesContent":["import React from 'react';\n\nconst Cast = ({ cast }) => {\n  return (\n    <div>\n      <h3>Cast</h3>\n      <ul>\n        {cast.map((actor) => (\n          <li key={actor.id}>{actor.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails, getMovieCredits, getMovieReviews } from '../services/api';\nimport Cast from 'components/Cast';\nimport Reviews from 'components/Reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const detailsResponse = await getMovieDetails(movieId);\n        setMovieDetails(detailsResponse.data);\n\n        const creditsResponse = await getMovieCredits(movieId);\n        setCast(creditsResponse.data.cast);\n\n        const reviewsResponse = await getMovieReviews(movieId);\n        setReviews(reviewsResponse.data.results);\n      } catch (error) {\n        console.error('Error fetching movie details', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h2>{movieDetails.title}</h2>\n      <p>{movieDetails.overview}</p>\n\n      <div>\n        <p>Release Date: {movieDetails.release_date}</p>\n        <p>Runtime: {movieDetails.runtime} minutes</p>   \n      </div>\n\n      <hr />\n\n      <Cast cast={cast} />\n\n      <hr />\n\n      <Reviews reviews={reviews} />\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React from 'react';\n\nconst Reviews = ({ reviews }) => {\n  return (\n    <div>\n      <h3>Reviews</h3>\n      <ul>\n        {reviews.map((review) => (\n          <li key={review.id}>\n            <strong>{review.author}</strong>: {review.content}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '328830ad39afbbc4f4fea7244342fed5';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await api.get('/trending/get-trending');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching trending movies', error);\n    throw error;\n  }\n};\n\nexport const searchMovies = async (query) => {\n  try {\n    const response = await api.get('/search/search-movies', { params: { query } });\n    return response.data;\n  } catch (error) {\n    console.error('Error searching movies', error);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await api.get(`/movies/get-movie-details/${movieId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details', error);\n    throw error;\n  }\n};\n\nexport const getMovieCredits = async (movieId) => {\n  try {\n    const response = await api.get(`/movies/get-movie-credits/${movieId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie credits', error);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await api.get(`/movies/get-movie-reviews/${movieId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie reviews', error);\n    throw error;\n  }\n};\n"],"names":["_ref","cast","_jsxs","children","_jsx","map","actor","name","id","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","_useState3","_useState4","setCast","_useState5","_useState6","reviews","setReviews","useEffect","fetchMovieDetails","_asyncToGenerator","_regeneratorRuntime","_callee","detailsResponse","creditsResponse","reviewsResponse","_context","prev","next","getMovieDetails","sent","data","getMovieCredits","getMovieReviews","results","t0","console","error","stop","apply","arguments","title","overview","release_date","runtime","Cast","Reviews","review","author","content","api","axios","baseURL","params","api_key","getTrendingMovies","response","get","abrupt","searchMovies","_ref2","_callee2","query","_context2","_x","_ref3","_callee3","_context3","concat","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}